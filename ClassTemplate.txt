#pragma once

#include <Arduino.h>
#include <vector>

namespace WebServer
{
    enum AlarmType
    {
        eON,
        eOFF,        
        eTOGGLE
    };

    struct ActionInfo
    {
        typedef void (*Callback_t)();
        Callback_t callback_;
        AlarmType type_;
        long duration_;
    };



    class Obj
    {
    public:
        Obj()
        {}

        ~Obj()
        {}

        void setup() 
        {
           

        }

        void loop() 
        {
           

        }


    private:
        


        
    };

    

}






// Singleton

#pragma once

#include <EEPROM.h>
#include "SPIFFS.h"

class StorageManager {
public:
    static StorageManager& instance() {
        static StorageManager _instance;
        return _instance;
    }

    void setStartingAddress(int addr) { startingAddress = addr; }
    int getStartingAddress() const { return startingAddress; }

    void saveIP(IPAddress ip);
    IPAddress loadIP();

private:
    int startingAddress = 0;

    StorageManager() = default;
    StorageManager(const StorageManager&) = delete;
    void operator=(const StorageManager&) = delete;
};


// usage:
StorageManager::instance().setStartingAddress(10);
StorageManager::instance().saveIP(WiFi.localIP());